{"version":3,"file":"static/js/327.74e57c3a.chunk.js","mappings":"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","sources":["component/Editor/nodes/InlineImageComponent.tsx","../node_modules/@lexical/react/LexicalNestedComposer.prod.mjs","../node_modules/@lexical/react/LexicalNestedComposer.mjs"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport type {Position} from './InlineImageNode.tsx';\nimport type {BaseSelection, LexicalEditor, NodeKey} from 'lexical';\n\nimport './InlineImageNode.css';\n\nimport {AutoFocusPlugin} from '@lexical/react/LexicalAutoFocusPlugin';\nimport {useLexicalComposerContext} from '@lexical/react/LexicalComposerContext';\nimport LexicalErrorBoundary from '@lexical/react/LexicalErrorBoundary';\nimport {LexicalNestedComposer} from '@lexical/react/LexicalNestedComposer';\nimport {RichTextPlugin} from '@lexical/react/LexicalRichTextPlugin';\nimport {useLexicalNodeSelection} from '@lexical/react/useLexicalNodeSelection';\nimport {mergeRegister} from '@lexical/utils';\nimport {\n  $getNodeByKey,\n  $getSelection,\n  $isNodeSelection,\n  $setSelection,\n  CLICK_COMMAND,\n  COMMAND_PRIORITY_LOW,\n  DRAGSTART_COMMAND,\n  KEY_BACKSPACE_COMMAND,\n  KEY_DELETE_COMMAND,\n  KEY_ENTER_COMMAND,\n  KEY_ESCAPE_COMMAND,\n  SELECTION_CHANGE_COMMAND,\n} from 'lexical';\nimport * as React from 'react';\nimport {Suspense, useCallback, useEffect, useRef, useState} from 'react';\n\nimport useModal from '../hooks/useModal.tsx';\nimport LinkPlugin from '../plugins/LinkPlugin/index.tsx';\nimport Button from '../ui/Button.tsx';\nimport ContentEditable from '../ui/ContentEditable.tsx';\nimport {DialogActions} from '../ui/Dialog.tsx';\nimport Placeholder from '../ui/Placeholder.tsx';\nimport Select from '../ui/Select.tsx';\nimport TextInput from '../ui/TextInput.tsx';\nimport {$isInlineImageNode, InlineImageNode} from './InlineImageNode.tsx';\n\nconst imageCache = new Set();\n\nfunction useSuspenseImage(src: string) {\n  if (!imageCache.has(src)) {\n    throw new Promise((resolve) => {\n      const img = new Image();\n      img.src = src;\n      img.onload = () => {\n        imageCache.add(src);\n        resolve(null);\n      };\n    });\n  }\n}\n\nfunction LazyImage({\n  altText,\n  className,\n  imageRef,\n  src,\n  width,\n  height,\n  position,\n}: {\n  altText: string;\n  className: string | null;\n  height: 'inherit' | number;\n  imageRef: {current: null | HTMLImageElement};\n  src: string;\n  width: 'inherit' | number;\n  position: Position;\n}): JSX.Element {\n  useSuspenseImage(src);\n  return (\n    <img\n      className={className || undefined}\n      src={src}\n      alt={altText}\n      ref={imageRef}\n      data-position={position}\n      style={{\n        display: 'block',\n        height,\n        width,\n      }}\n      draggable=\"false\"\n    />\n  );\n}\n\nexport function UpdateInlineImageDialog({\n  activeEditor,\n  nodeKey,\n  onClose,\n}: {\n  activeEditor: LexicalEditor;\n  nodeKey: NodeKey;\n  onClose: () => void;\n}): JSX.Element {\n  const editorState = activeEditor.getEditorState();\n  const node = editorState.read(\n    () => $getNodeByKey(nodeKey) as InlineImageNode,\n  );\n  const [altText, setAltText] = useState(node.getAltText());\n  const [showCaption, setShowCaption] = useState(node.getShowCaption());\n  const [position, setPosition] = useState<Position>(node.getPosition());\n\n  const handleShowCaptionChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setShowCaption(e.target.checked);\n  };\n\n  const handlePositionChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setPosition(e.target.value as Position);\n  };\n\n  const handleOnConfirm = () => {\n    const payload = {altText, position, showCaption};\n    if (node) {\n      activeEditor.update(() => {\n        node.update(payload);\n      });\n    }\n    onClose();\n  };\n\n  return (\n    <>\n      <div style={{marginBottom: '1em'}}>\n        <TextInput\n          label=\"Alt Text\"\n          placeholder=\"Descriptive alternative text\"\n          onChange={setAltText}\n          value={altText}\n          data-test-id=\"image-modal-alt-text-input\"\n        />\n      </div>\n\n      <Select\n        style={{marginBottom: '1em', width: '208px'}}\n        value={position}\n        label=\"Position\"\n        name=\"position\"\n        id=\"position-select\"\n        onChange={handlePositionChange}>\n        <option value=\"left\">Left</option>\n        <option value=\"right\">Right</option>\n        <option value=\"full\">Full Width</option>\n      </Select>\n\n      <div className=\"Input__wrapper\">\n        <input\n          id=\"caption\"\n          type=\"checkbox\"\n          checked={showCaption}\n          onChange={handleShowCaptionChange}\n        />\n        <label htmlFor=\"caption\">Show Caption</label>\n      </div>\n\n      <DialogActions>\n        <Button\n          data-test-id=\"image-modal-file-upload-btn\"\n          onClick={() => handleOnConfirm()}>\n          Confirm\n        </Button>\n      </DialogActions>\n    </>\n  );\n}\n\nexport default function InlineImageComponent({\n  src,\n  altText,\n  nodeKey,\n  width,\n  height,\n  showCaption,\n  caption,\n  position,\n}: {\n  altText: string;\n  caption: LexicalEditor;\n  height: 'inherit' | number;\n  nodeKey: NodeKey;\n  showCaption: boolean;\n  src: string;\n  width: 'inherit' | number;\n  position: Position;\n}): JSX.Element {\n  const [modal, showModal] = useModal();\n  const imageRef = useRef<null | HTMLImageElement>(null);\n  const buttonRef = useRef<HTMLButtonElement | null>(null);\n  const [isSelected, setSelected, clearSelection] =\n    useLexicalNodeSelection(nodeKey);\n  const [editor] = useLexicalComposerContext();\n  const [selection, setSelection] = useState<BaseSelection | null>(null);\n  const activeEditorRef = useRef<LexicalEditor | null>(null);\n\n  const onDelete = useCallback(\n    (payload: KeyboardEvent) => {\n      if (isSelected && $isNodeSelection($getSelection())) {\n        const event: KeyboardEvent = payload;\n        event.preventDefault();\n        const node = $getNodeByKey(nodeKey);\n        if ($isInlineImageNode(node)) {\n          node.remove();\n          return true;\n        }\n      }\n      return false;\n    },\n    [isSelected, nodeKey],\n  );\n\n  const onEnter = useCallback(\n    (event: KeyboardEvent) => {\n      const latestSelection = $getSelection();\n      const buttonElem = buttonRef.current;\n      if (\n        isSelected &&\n        $isNodeSelection(latestSelection) &&\n        latestSelection.getNodes().length === 1\n      ) {\n        if (showCaption) {\n          // Move focus into nested editor\n          $setSelection(null);\n          event.preventDefault();\n          caption.focus();\n          return true;\n        } else if (\n          buttonElem !== null &&\n          buttonElem !== document.activeElement\n        ) {\n          event.preventDefault();\n          buttonElem.focus();\n          return true;\n        }\n      }\n      return false;\n    },\n    [caption, isSelected, showCaption],\n  );\n\n  const onEscape = useCallback(\n    (event: KeyboardEvent) => {\n      if (\n        activeEditorRef.current === caption ||\n        buttonRef.current === event.target\n      ) {\n        $setSelection(null);\n        editor.update(() => {\n          setSelected(true);\n          const parentRootElement = editor.getRootElement();\n          if (parentRootElement !== null) {\n            parentRootElement.focus();\n          }\n        });\n        return true;\n      }\n      return false;\n    },\n    [caption, editor, setSelected],\n  );\n\n  useEffect(() => {\n    let isMounted = true;\n    const unregister = mergeRegister(\n      editor.registerUpdateListener(({editorState}) => {\n        if (isMounted) {\n          setSelection(editorState.read(() => $getSelection()));\n        }\n      }),\n      editor.registerCommand(\n        SELECTION_CHANGE_COMMAND,\n        (_, activeEditor) => {\n          activeEditorRef.current = activeEditor;\n          return false;\n        },\n        COMMAND_PRIORITY_LOW,\n      ),\n      editor.registerCommand<MouseEvent>(\n        CLICK_COMMAND,\n        (payload) => {\n          const event = payload;\n          if (event.target === imageRef.current) {\n            if (event.shiftKey) {\n              setSelected(!isSelected);\n            } else {\n              clearSelection();\n              setSelected(true);\n            }\n            return true;\n          }\n\n          return false;\n        },\n        COMMAND_PRIORITY_LOW,\n      ),\n      editor.registerCommand(\n        DRAGSTART_COMMAND,\n        (event) => {\n          if (event.target === imageRef.current) {\n            // TODO This is just a temporary workaround for FF to behave like other browsers.\n            // Ideally, this handles drag & drop too (and all browsers).\n            event.preventDefault();\n            return true;\n          }\n          return false;\n        },\n        COMMAND_PRIORITY_LOW,\n      ),\n      editor.registerCommand(\n        KEY_DELETE_COMMAND,\n        onDelete,\n        COMMAND_PRIORITY_LOW,\n      ),\n      editor.registerCommand(\n        KEY_BACKSPACE_COMMAND,\n        onDelete,\n        COMMAND_PRIORITY_LOW,\n      ),\n      editor.registerCommand(KEY_ENTER_COMMAND, onEnter, COMMAND_PRIORITY_LOW),\n      editor.registerCommand(\n        KEY_ESCAPE_COMMAND,\n        onEscape,\n        COMMAND_PRIORITY_LOW,\n      ),\n    );\n    return () => {\n      isMounted = false;\n      unregister();\n    };\n  }, [\n    clearSelection,\n    editor,\n    isSelected,\n    nodeKey,\n    onDelete,\n    onEnter,\n    onEscape,\n    setSelected,\n  ]);\n\n  const draggable = isSelected && $isNodeSelection(selection);\n  const isFocused = isSelected;\n  return (\n    <Suspense fallback={null}>\n      <>\n        <div draggable={draggable}>\n          <button\n            className=\"image-edit-button\"\n            ref={buttonRef}\n            onClick={() => {\n              showModal('Update Inline Image', (onClose) => (\n                <UpdateInlineImageDialog\n                  activeEditor={editor}\n                  nodeKey={nodeKey}\n                  onClose={onClose}\n                />\n              ));\n            }}>\n            Edit\n          </button>\n          <LazyImage\n            className={\n              isFocused\n                ? `focused ${$isNodeSelection(selection) ? 'draggable' : ''}`\n                : null\n            }\n            src={src}\n            altText={altText}\n            imageRef={imageRef}\n            width={width}\n            height={height}\n            position={position}\n          />\n        </div>\n        {showCaption && (\n          <div className=\"image-caption-container\">\n            <LexicalNestedComposer initialEditor={caption}>\n              <AutoFocusPlugin />\n              <LinkPlugin />\n              <RichTextPlugin\n                contentEditable={\n                  <ContentEditable className=\"InlineImageNode__contentEditable\" />\n                }\n                placeholder={\n                  <Placeholder className=\"InlineImageNode__placeholder\">\n                    Enter a caption...\n                  </Placeholder>\n                }\n                ErrorBoundary={LexicalErrorBoundary}\n              />\n            </LexicalNestedComposer>\n          </div>\n        )}\n      </>\n      {modal}\n    </Suspense>\n  );\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport{useCollaborationContext as e}from\"@lexical/react/LexicalCollaborationContext\";import{LexicalComposerContext as t,createLexicalComposerContext as r}from\"@lexical/react/LexicalComposerContext\";import*as o from\"react\";import{useRef as n,useContext as l,useMemo as i,useEffect as a}from\"react\";var s=function(e){const t=new URLSearchParams;t.append(\"code\",e);for(let e=1;e<arguments.length;e++)t.append(\"v\",arguments[e]);throw Error(`Minified Lexical error #${e}; visit https://lexical.dev/docs/error?${t} for the full message or use the non-minified dev environment for full errors and additional helpful warnings.`)};function c(e){const t=e.transform();return null!==t?new Set([t]):new Set}function p({initialEditor:p,children:f,initialNodes:d,initialTheme:m,skipCollabChecks:u}){const h=n(!1),x=l(t);null==x&&s(9);const[g,{getTheme:v}]=x,_=i((()=>{const e=m||v()||void 0,t=r(x,e);if(void 0!==e&&(p._config.theme=e),p._parentEditor=g,d)for(let e of d){let t=null,r=null;if(\"function\"!=typeof e){const o=e;e=o.replace,t=o.with,r=o.withKlass||null}const o=p._nodes.get(e.getType());p._nodes.set(e.getType(),{exportDOM:o?o.exportDOM:void 0,klass:e,replace:t,replaceWithKlass:r,transforms:c(e)})}else{const e=p._nodes=new Map(g._nodes);for(const[t,r]of e)p._nodes.set(t,{exportDOM:r.exportDOM,klass:r.klass,replace:r.replace,replaceWithKlass:r.replaceWithKlass,transforms:c(r.klass)})}return p._config.namespace=g._config.namespace,p._editable=g._editable,[p,t]}),[]),{isCollabActive:w,yjsDocMap:b}=e(),C=u||h.current||b.has(p.getKey());return a((()=>{C&&(h.current=!0)}),[C]),a((()=>g.registerEditableListener((e=>{p.setEditable(e)}))),[p,g]),o.createElement(t.Provider,{value:_},!w||C?f:null)}export{p as LexicalNestedComposer};\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport * as modDev from './LexicalNestedComposer.dev.mjs';\nimport * as modProd from './LexicalNestedComposer.prod.mjs';\nconst mod = process.env.NODE_ENV === 'development' ? modDev : modProd;\nexport const LexicalNestedComposer = mod.LexicalNestedComposer;"],"names":["imageCache","Set","LazyImage","_ref","altText","className","imageRef","src","width","height","position","has","Promise","resolve","img","Image","onload","add","useSuspenseImage","_jsx","undefined","alt","ref","style","display","draggable","UpdateInlineImageDialog","_ref2","activeEditor","nodeKey","onClose","node","getEditorState","read","$getNodeByKey","setAltText","useState","getAltText","showCaption","setShowCaption","getShowCaption","setPosition","getPosition","_jsxs","_Fragment","children","marginBottom","TextInput","label","placeholder","onChange","value","Select","name","id","e","target","type","checked","htmlFor","DialogActions","Button","onClick","handleOnConfirm","payload","update","InlineImageComponent","_ref3","caption","modal","showModal","useModal","useRef","buttonRef","isSelected","setSelected","clearSelection","useLexicalNodeSelection","editor","useLexicalComposerContext","selection","setSelection","activeEditorRef","onDelete","useCallback","$isNodeSelection","$getSelection","preventDefault","$isInlineImageNode","remove","onEnter","event","latestSelection","buttonElem","current","getNodes","length","$setSelection","focus","document","activeElement","onEscape","parentRootElement","getRootElement","useEffect","isMounted","unregister","mergeRegister","registerUpdateListener","_ref4","editorState","registerCommand","SELECTION_CHANGE_COMMAND","_","COMMAND_PRIORITY_LOW","CLICK_COMMAND","shiftKey","DRAGSTART_COMMAND","KEY_DELETE_COMMAND","KEY_BACKSPACE_COMMAND","KEY_ENTER_COMMAND","KEY_ESCAPE_COMMAND","isFocused","Suspense","fallback","concat","LexicalNestedComposer","initialEditor","AutoFocusPlugin","LinkPlugin","RichTextPlugin","contentEditable","ContentEditable","Placeholder","ErrorBoundary","LexicalErrorBoundary","s","t","URLSearchParams","append","arguments","Error","c","transform","p","f","initialNodes","d","initialTheme","m","skipCollabChecks","u","h","n","x","l","g","getTheme","v","i","r","_config","theme","_parentEditor","o","replace","with","withKlass","_nodes","get","getType","set","exportDOM","klass","replaceWithKlass","transforms","Map","namespace","_editable","isCollabActive","w","yjsDocMap","b","C","getKey","a","registerEditableListener","setEditable","Provider","modProd"],"sourceRoot":""}